
plugins {
//    com.android.application 表示这是一个应用程序模块
//    com.android.library 表示这是一个库模块
//    应用程序模块是可以直 接运行的，库模块只能作为代码库依附于别的应用程序模块来运行
    id 'com.android.application'
//    表示要使用kotlin来开发安卓项目
    id 'org.jetbrains.kotlin.android'
    //已废弃
//    id "kotlin-android-extensions"
    id 'com.google.devtools.ksp'

    //使用一下替代
    id "kotlin-parcelize"

}

android {
    namespace 'com.example.hqandroidstu'
    compileSdk 34

    defaultConfig {
//        应用包id
        applicationId "com.example.hqandroidstu"
        minSdk 21
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    //编译配置
    buildFeatures {

        /*

        // https://developer.android.com/topic/libraries/view-binding/migration?hl=zh-cn
        // https://developer.android.com/topic/libraries/view-binding?hl=zh-cn#activities

        开启视图绑定将会为布局根据其名称生成一个bind类名，如布局 activity_main.xml 将会
        为其生成一个 ActivityMainBinding 的类
        //使用方法如下：

        private lateinit var rootBind: ActivityMainBinding
        override fun onCreate(savedInstanceState: Bundle?) {
            super.onCreate(savedInstanceState)
            //初始化bind
            rootBind = ActivityMainBinding.inflate(layoutInflater)
            //设置root view
            setContentView(rootBind.root)
            //通过视图绑定类获取其子控件，并设置点击事件监听
            // goBtn 是布局中设置子视图的id
            rootBind.goBtn.setOnClickListener {
                //....
            }
        }
   */
        viewBinding true
    }

    buildTypes {
        release {
            // 用于指定是否对项目的代码进行混淆
            minifyEnabled false
            // 混淆规则文件
            // 第一个proguard-android-optimize.txt是在 <Android SDK>/tools/proguard目录下的，里面是所有项目通用的混淆规则
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}


dependencies {
//    本地依赖，表示将libs目录下所有.jar后缀的文件都添加到项目的构建路径中
    implementation fileTree(dir: 'libs', include: ['*.jar'])
//    远程依赖，首先检查一下本 地是否已经有这个库的缓存，如果没有的话则会自动联网下载，然后再添加到项目的构建路径 中
    implementation 'androidx.core:core-ktx:1.13.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
//    库依赖，比如有一个库模块的名字叫helper，则使用如下方式添加
//    implementation project(':helper')

    //OkHttp https://github.com/square/okhttp
    // define a BOM and its version
    implementation(platform("com.squareup.okhttp3:okhttp-bom:4.12.0"))
    // define any required OkHttp artifacts without version
    implementation("com.squareup.okhttp3:okhttp")
    implementation("com.squareup.okhttp3:logging-interceptor")

    //GJSON https://gitcode.com/google/gson/overview
    implementation("com.google.code.gson:gson:2.10.1")

    // https://github.com/square/retrofit
    // https://square.github.io/retrofit/
    implementation("com.squareup.retrofit2:retrofit:2.9.0")
    //配置json转模型
    implementation("com.squareup.retrofit2:converter-gson:2.9.0")

    //圆角图片
    // https://github.com/hdodenhof/CircleImageView
    implementation("de.hdodenhof:circleimageview:3.1.0")

    //网络图片加载库 https://github.com/bumptech/glide
    implementation("com.github.bumptech.glide:glide:4.16.0")

    //下拉刷新 https://developer.android.com/jetpack/androidx/releases/swiperefreshlayout?hl=zh-cn
    implementation("androidx.swiperefreshlayout:swiperefreshlayout:1.1.0")


    // https://developer.android.com/training/data-storage/room?hl=zh-cn
    //ORM room
    implementation "androidx.room:room-runtime:2.6.1"
    // https://kotlinlang.org/docs/ksp-quickstart.html#edbacca8
    ksp 'androidx.room:room-compiler:2.6.1'

    implementation("androidx.work:work-runtime:2.9.0")


    // 调试工具 https://github.com/didi/DoKit/blob/master/Android/README.md


    //自定义相机
    def camerax_version = "1.3.3"
    implementation "androidx.camera:camera-core:${camerax_version}"
    implementation "androidx.camera:camera-camera2:${camerax_version}"
    implementation "androidx.camera:camera-lifecycle:${camerax_version}"
    implementation "androidx.camera:camera-video:${camerax_version}"
    implementation "androidx.camera:camera-view:${camerax_version}"
    implementation "androidx.camera:camera-extensions:${camerax_version}"
    implementation "androidx.camera:camera-mlkit-vision:1.3.0-beta02"


    //扫一扫解码
    // https://developers.google.com/ml-kit/vision/barcode-scanning/android?hl=zh-cn
    implementation 'com.google.mlkit:barcode-scanning:17.2.0'
    implementation 'com.google.mlkit:vision-common:17.3.0'



    //引用本地模块
    implementation project(':HqPermissionX')

}

//导入其他gradle文件
apply{
    from("./utils.gradle")
}
